<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.andong.smartfactoryweb.mapper.OrderMapper">

    <resultMap id="orderResultMap" type="com.andong.smartfactoryweb.app.order.vo.MaterialVO">
        <id property="materialSeq" column="material_seq"/>
        <result property="materialName" column="material_name"/>
        <result property="materialRemainCount" column="material_remain_count"/>
        <result property="materialPrice" column="material_price"/>
        <collection property="orderMaterials" javaType="java.util.List"
                    ofType="com.andong.smartfactoryweb.app.order.vo.OrderMaterialVO">
            <id property="orderMaterialSeq" column="order_material_seq"/>
            <result property="materialSeq" column="material_seq"/>
            <result property="productOrderSeq" column="product_order_seq"/>
            <result property="count" column="count"/>
            <result property="createAt" column="create_at"/>
            <result property="region" column="region"/>
            <result property="materialTotalPrice" column="material_total_price"/>
        </collection>

    </resultMap>


    <select id="productInfo" parameterType="LONG" resultMap="orderResultMap">
        SELECT
            material_seq,
            material_name,
            material_remain_count,
            material_price
        FROM material
    </select>

    <select id="orderInfo" parameterType="LONG" resultMap="orderResultMap">
        SELECT
            order_material_seq,
            material_seq,
            product_order_seq,
            count,
            create_at,
            region,
            material_total_price
        FROM order_material
    </select>

    <insert id="insertProductOrder" parameterType="com.andong.smartfactoryweb.app.order.vo.ProductOrderVO" useGeneratedKeys="true" keyProperty="productOrderSeq">
        <!-- 적절한 INSERT 쿼리 작성 -->
        INSERT INTO product_order(
            user_seq
            , product_status
            , order_date
            , approval_id
        )VALUES (
            #{userSeq}
            , #{productStatus}
            , now()
            , #{approvalId}
        )
        <selectKey keyProperty="productOrderSeq" resultType="long" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>

    </insert>

    <insert id="insertOrderMaterial" parameterType="com.andong.smartfactoryweb.app.order.vo.OrderMaterialVO">
        <!-- 적절한 INSERT 쿼리 작성 -->
        INSERT INTO order_material(
            material_seq
            , product_order_seq
            , count
            , create_at
            , material_total_price
            , region
        )VALUES (
            #{materialSeq}
            , #{productOrderSeq}
            , #{count}
            , now()
            , #{materialTotalPrice}
            , #{region}
        )

    </insert>


    <update id="updateMaterialCount">
        UPDATE material
        SET material_remain_count = material_remain_count + #{quantity}
        WHERE material_name = #{materialName}
    </update>


    <resultMap id="OrderStatusResultMap" type="com.andong.smartfactoryweb.app.order.vo.OrderStatusVO">
        <result property="productOrderSeq" column="product_order_seq" />
        <result property="createAt" column="create_at" />
        <result property="productStatus" column="product_status" />
        <result property="userName" column="user_name" />
        <!-- 나머지 컬럼과 프로퍼티 매핑 -->
    </resultMap>

    <!-- SELECT 쿼리 정의 -->
    <select id="selectOrderStatus" resultMap="OrderStatusResultMap">
        SELECT
            po.product_order_seq AS product_order_seq,
            po.order_date AS order_date,
            po.product_status AS product_status,
            u.user_name AS user_name
        FROM
            product_order po
                LEFT JOIN user u ON po.user_seq = u.user_seq
    </select>


    <resultMap id="orderMaterialResultMap" type="com.andong.smartfactoryweb.app.order.vo.OrderDetailStatusVO">
        <result property="materialName" column="material_name" />
        <result property="count" column="count" />
        <result property="region" column="region" />
        <result property="materialPrice" column="material_price" />
        <result property="materialTotalPrice" column="material_total_price" />
    </resultMap>

    <select id="selectDetailStatus" resultMap="orderMaterialResultMap">
        SELECT
            om.product_order_seq,
            m.material_name,
            om.count,
            om.region,
            m.material_price,
            om.material_total_price
        FROM
            material m
                JOIN order_material om ON m.material_seq = om.material_seq
    </select>


    <resultMap id="UserOrderStatusResultMap" type="com.andong.smartfactoryweb.app.order.vo.UserOrderStatusVO">
        <result property="productOrderSeq" column="product_order_seq" />
        <result property="orderDate" column="order_date" />
        <result property="productStatus" column="product_status" />
        <result property="userName" column="user_name" />
    </resultMap>

    <select id="selectUserOrderStatus" resultMap="UserOrderStatusResultMap" parameterType="java.lang.String">
        SELECT
            po.product_order_seq AS product_order_seq,
            po.order_date AS order_date,
            po.product_status AS product_status,
            u.user_name AS user_name
        FROM
            product_order po
                LEFT JOIN
            user u ON po.user_seq = u.user_seq
        WHERE
            u.user_id = #{userId}
    </select>

    <!-- resultMap 정의 -->
    <resultMap id="getOrderInfo" type="com.andong.smartfactoryweb.app.order.vo.ProductOrderVO">
        <id property="productOrderSeq" column="product_order_seq"/>
        <result property="orderDate" column="order_date"/>
        <result property="productStatus" column="product_status"/>
        <result property="approvalId" column="approval_id"/>
        <!-- UserVO와의 관계 매핑 -->
        <association property="user" javaType="com.andong.smartfactoryweb.app.user.vo.UserVO">
            <id property="userSeq" column="user_seq"/>
            <result property="userName" column="user_name"/>
            <!-- 나머지 필요한 매핑 -->
        </association>
        <!-- OrderMaterialVO와의 1:N 관계 매핑 -->
        <collection property="orderMaterials" javaType="java.util.List"
                    ofType="com.andong.smartfactoryweb.app.order.vo.OrderMaterialVO">
            <id property="orderMaterialSeq" column="order_material_seq"/>
            <result property="materialSeq" column="material_seq"/>
            <result property="productOrderSeq" column="product_order_seq"/>
            <result property="count" column="count"/>
            <result property="createAt" column="create_at"/>
            <result property="region" column="region"/>
        </collection>
    </resultMap>

    <!-- select 쿼리 정의 -->
    <select id="selectProductOrder" resultMap="getOrderInfo">
        SELECT
            po.product_order_seq AS product_order_seq,
            po.user_seq AS user_seq,
            po.product_status AS product_status,
            po.order_date AS order_date,
            po.approval_id AS approval_id,
            u.user_name AS user_name,
            om.order_material_seq AS order_material_seq,
            om.material_seq AS material_seq,
            om.count AS count,
        om.create_at AS create_at,
        om.region AS region
        FROM
            product_order po
            LEFT JOIN
            user u ON po.user_seq = u.user_seq
            LEFT JOIN
            order_material om ON po.product_order_seq = om.product_order_seq
    </select>

    <!-- 사용자 ID로 사용자 시퀀스 조회 -->
    <select id="selectUserSeq" resultType="java.lang.Long" parameterType="java.lang.String">
        SELECT user_seq
        FROM user
        WHERE user_id = #{userId}
    </select>


    <!-- 금일 이용자 현황: product_order 테이블의 order_date가 오늘 월, 일과 같은 행의 개수 추출 -->
    <select id="countOrdersForToday" resultType="int">
        SELECT COUNT(*)
        FROM product_order
        WHERE DATE(order_date) = CURDATE();
    </select>

    <!-- 새 고객: user 테이블의 create_at 날짜가 오늘의 월, 일과 같은 행의 개수 추출 -->
    <select id="countNewCustomersForToday" resultType="int">
        SELECT COUNT(*)
        FROM user
        WHERE DATE(create_at) = CURDATE();
    </select>

    <!-- material_seq가 1인 물품의 count를 가져오는 쿼리 -->
    <select id="getCountSellMaterial1" resultType="java.lang.Integer">
        SELECT SUM(count) FROM order_material WHERE material_seq = 1
    </select>

    <!-- material_seq가 2인 물품의 count를 가져오는 쿼리 -->
    <select id="getCountSellMaterial2" resultType="java.lang.Integer">
        SELECT SUM(count) FROM order_material WHERE material_seq = 2
    </select>

    <!-- material_seq가 3인 물품의 count를 가져오는 쿼리 -->
    <select id="getCountSellMaterial3" resultType="java.lang.Integer">
        SELECT SUM(count) FROM order_material WHERE material_seq = 3
    </select>


    <select id="countByRegion" resultType="java.lang.Integer" parameterType="java.lang.String">
        SELECT COUNT(*) FROM order_material WHERE region = #{region}
    </select>

    <select id="selectVIPUser" resultType="com.andong.smartfactoryweb.app.order.vo.VIPUserVO">
        SELECT
            u.user_name,
            u.email,
            SUM(om.material_total_price) AS money,
            MAX(po.order_date) AS order_date,
            COUNT(po.product_order_seq) AS order_count
        FROM
            user AS u
                INNER JOIN product_order AS po ON u.user_seq = po.user_seq
                INNER JOIN order_material AS om ON om.product_order_seq = po.product_order_seq
        GROUP BY
            u.user_name, u.email
        ORDER BY
            money DESC
        LIMIT 5;

    </select>


    <select id="selectMoney" parameterType="int" resultType="int">
        WITH RECURSIVE DateTable AS (
            SELECT CURDATE() - INTERVAL 7 DAY AS date_column
        UNION ALL
        SELECT DATE_ADD(date_column, INTERVAL 1 DAY)
        FROM DateTable
        WHERE CURDATE() >= date_column
            )
        SELECT
            COALESCE(SUM(om.material_total_price), 0) AS total_price
        FROM
            DateTable d
                LEFT JOIN order_material AS om ON d.date_column = DATE(om.create_at)
        WHERE
            d.date_column > CURDATE() - INTERVAL 7 DAY
          AND DAYOFWEEK(d.date_column) = #{dayOfWeek}
    </select>



    <!--통계 분석 페이지에 사용되는 금일 매출액 및 총 매출액 쿼리-->
    <select id="getDailySales" resultType="Long" parameterType="java.util.Date">
        SELECT COALESCE(SUM(material_total_price), 0) AS dailySales
        FROM order_material
        WHERE DATE (create_at) = DATE(#{date})
    </select>

    <select id="getTotalSales" resultType="Long">
        SELECT COALESCE(SUM(material_total_price), 0) AS totalSales
        FROM order_material
    </select>

    <update id="minusProduct" parameterType="map">

        UPDATE material
        SET material_remain_count = material_remain_count - #{count}
        WHERE material_seq IN (
        SELECT material_seq
        FROM (
        SELECT om.material_seq
        FROM order_material om
        INNER JOIN material m ON om.material_seq = m.material_seq
        WHERE om.material_seq = #{materialSeq}
        ) AS temp_table
        )
    </update>




</mapper>